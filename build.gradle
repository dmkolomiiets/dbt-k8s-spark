buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'software.amazon.awssdk:s3:2.25.16'
  }
}

plugins {
  id("java-library")
  id("com.github.ben-manes.versions") version "0.29.0" apply(false)
  id("org.jetbrains.gradle.plugin.idea-ext") version "0.8.1" apply(false)
}

def VERSIONS = [
  assertj             : "3.17.0",
  cucumber            : "6.5.1",
  junit               : "5.7.0-RC1",
  guava               : "31.1-jre",
  springBoot          : "2.7.3",
  kubernetesAssertions: "4.0.0",
  kubernetesClient    : "5.10.2",
]

group "com.arcadia"
version "1.0.0"

if (!System.getenv().hasProperty("CI") || !System.getenv("CI")) {
  apply plugin: "idea"
  apply plugin: "jacoco"
  apply plugin: "org.jetbrains.gradle.plugin.idea-ext"
  apply plugin: "com.github.ben-manes.versions"

  tasks {
    dependencyUpdates {
      checkConstraints true
    }
    idea {
      module {
        outputDir project.buildDir
        downloadJavadoc false
        downloadSources true
        inheritOutputDirs true
        excludeDirs += files(".gradle", ".idea", ".scannerwork", "gradle")
        generatedSourceDirs += files(
          "${project.buildDir}/generated/sources/annotationProcessor/java/main",
          "${project.buildDir}/generated/sources/annotationProcessor/java/test"
        )
      }
    }
    jacocoTestReport {
      reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination file("${project.buildDir}/reports/jacoco")
      }
    }
    test {
      jacoco {
        enabled true
        dumpOnExit true
      }
      testLogging {
        showStandardStreams = true
      }
      finalizedBy tasks.getByName("jacocoTestReport")
    }

  }
}

class CucumberTask extends JavaExec {
  @Override
  void setMustRunAfter(Iterable<?> mustRunAfterTasks) {
    super.setMustRunAfter(mustRunAfterTasks)
  }

  CucumberTask withDirectories(String... name) {
    name.each { args += ["--select-directory", it] }
    return this
  }

  CucumberTask() {
    group "cucumber"
    dependsOn project.tasks.getByName("build"), project.tasks.getByName("testClasses") //, project.tasks.getByName("uploadCucumberReportToS3")
    outputs.dir "${project.buildDir}/reports"
    main "org.junit.platform.console.ConsoleLauncher"
    classpath project.convention.getPlugin(JavaPluginConvention.class).sourceSets.findByName("test").runtimeClasspath
    args "--include-engine", "cucumber", "--reports-dir", "${project.buildDir}/reports"

  }
}

dependencyLocking {
  lockAllConfigurations()
  lockFile = file("${projectDir}/gradle.lockfile")
}


tasks {
  compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    options.fork = true
    options.warnings = false
    options.incremental = true
    dependsOn tasks.getByName("processResources")
  }
  test {
    useJUnitPlatform {
      failFast true
    }
    scanForTestClasses false
  }
}

String featureDir = System.getenv().hasProperty("FEATURE_DIR") ? System.getenv("FEATURE_DIR") : "base"

String featureDirs = ["${project.buildDir}/resources/test/${project.group.toString().replace('.', '/')}/features/${featureDir}"]

tasks.register("features", CucumberTask) {
  it.withDirectories(featureDirs)
}

repositories {
  mavenCentral()
  maven {
    url "https://maven.aksw.org/repository/internal/"
  }
}

dependencies {
  implementation platform("org.springframework.boot:spring-boot-dependencies:$VERSIONS.springBoot")
  implementation 'org.projectlombok:lombok:1.18.22'
  annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:$VERSIONS.springBoot")
  implementation platform("io.cucumber:cucumber-core:$VERSIONS.cucumber")
  testImplementation platform("org.junit:junit-bom:$VERSIONS.junit")
  testRuntimeOnly platform("org.junit:junit-bom:$VERSIONS.junit")
  compileOnly 'org.projectlombok:lombok:1.18.20'
  annotationProcessor 'org.projectlombok:lombok:1.18.20'
  implementation("com.google.guava:guava:$VERSIONS.guava")
  implementation 'software.amazon.awssdk:ec2:2.25.16'
  implementation("io.cucumber:cucumber-java")
  implementation("io.cucumber:cucumber-spring")
  implementation("io.fabric8:kubernetes-assertions:$VERSIONS.kubernetesAssertions")
  implementation("io.fabric8:kubernetes-client:$VERSIONS.kubernetesClient") {
  }
  implementation("org.assertj:assertj-core:$VERSIONS.assertj")
  implementation("org.springframework.boot:spring-boot-starter-web") {
  }
  testImplementation("io.cucumber:cucumber-junit-platform-engine")
  testImplementation("org.junit.jupiter:junit-jupiter-api")
  testImplementation("org.springframework.boot:spring-boot-starter-test"){
    }
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
  testRuntimeOnly("org.junit.platform:junit-platform-console")
  testRuntimeOnly("org.junit.platform:junit-platform-runner")

  annotationProcessor("org.projectlombok:lombok")
}
